#+TITLE: Readme

* Demo

Link: custom-filter.herokuapp.com
GIF:

[[https://github.com/SarthakAdhikari/custom-filter/blob/main/demo.gif]]


For our mini-technical assignment, weâ€™d like you to build a custom filtering feature to support complex
queries in Django. The API filtering should allow using parenthesis for defining operations, precedence,
and allow the use any combination of the available fields. The supported operations should include or,
and, eq (equals), ne (not equals), gt (greater than), lt (lower than).

As examples:

Example 1:
#+begin_example
(date eq 2016-05-01) AND ((distance gt 20) OR (distance lt 10))
#+end_example

Example 2
#+begin_example
distance lt 10
#+end_example

#+begin_src python :eval no
def parse_search_phrase(allowed_fields, phrase):
    ...
return Q(...)
#+end_src

The final program should be able to be used as follows:
#+begin_src python :eval no
search_filter = parse_search_phrase(allowed_fields, search_phrase)
queryset = MyModel.objects.filter(search_filter)
#+end_src

* Implementation

First, the query params were tokenized and were converted from infix to
postfix notation. This simplified the problem by removing precedence and
the list of postfix notation tokens were filtered according to available_fields. Finally, the Q objects were created from the filtered
post fix tokens.

* Local Installation

1. Clone this repo.

2. Run the follwing inside repo root:
   #+begin_src sh :eval no
pip3 install -r requirements.txt
python manage.py migrate
python manage.py loaddata fixtures.json
python manage.py runserver
   #+end_src

* For running unit tests for filter

#+begin_src python :eval no
python manage.py test
#+end_src
